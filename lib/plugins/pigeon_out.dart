// Autogenerated from Pigeon (v15.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

class NetHeaderBean {
  NetHeaderBean({
    required this.authorization,
    required this.userAgent,
    required this.cityCode,
    required this.acceptLanguage,
  });

  String authorization;

  String userAgent;

  String cityCode;

  String acceptLanguage;

  Object encode() {
    return <Object?>[
      authorization,
      userAgent,
      cityCode,
      acceptLanguage,
    ];
  }

  static NetHeaderBean decode(Object result) {
    result as List<Object?>;
    return NetHeaderBean(
      authorization: result[0]! as String,
      userAgent: result[1]! as String,
      cityCode: result[2]! as String,
      acceptLanguage: result[3]! as String,
    );
  }
}

class BatteryMapBean {
  BatteryMapBean({
    required this.address,
    required this.latitude,
    required this.longitude,
    required this.time,
  });

  String address;

  double latitude;

  double longitude;

  String time;

  Object encode() {
    return <Object?>[
      address,
      latitude,
      longitude,
      time,
    ];
  }

  static BatteryMapBean decode(Object result) {
    result as List<Object?>;
    return BatteryMapBean(
      address: result[0]! as String,
      latitude: result[1]! as double,
      longitude: result[2]! as double,
      time: result[3]! as String,
    );
  }
}

class _FlutterToNativeCodec extends StandardMessageCodec {
  const _FlutterToNativeCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is BatteryMapBean) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is NetHeaderBean) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return BatteryMapBean.decode(readValue(buffer)!);
      case 129: 
        return NetHeaderBean.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class FlutterToNative {
  /// Constructor for [FlutterToNative].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  FlutterToNative({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _FlutterToNativeCodec();

  Future<NetHeaderBean> getNetHeaderBean() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.saas_flutter_module.FlutterToNative.getNetHeaderBean';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NetHeaderBean?)!;
    }
  }

  Future<BatteryMapBean> getBatteryMapBean() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.saas_flutter_module.FlutterToNative.getBatteryMapBean';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as BatteryMapBean?)!;
    }
  }

  Future<void> navigation() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.saas_flutter_module.FlutterToNative.navigation';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}
