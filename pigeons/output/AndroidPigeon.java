// Autogenerated from Pigeon (v15.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.immotor.saas.flutter.pigeon;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class AndroidPigeon {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @NonNull
  protected static FlutterError createConnectionError(@NonNull String channelName) {
    return new FlutterError("channel-error",  "Unable to establish connection on channel: " + channelName + ".", "");
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class NetHeaderBean {
    private @NonNull String authorization;

    public @NonNull String getAuthorization() {
      return authorization;
    }

    public void setAuthorization(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"authorization\" is null.");
      }
      this.authorization = setterArg;
    }

    private @NonNull String userAgent;

    public @NonNull String getUserAgent() {
      return userAgent;
    }

    public void setUserAgent(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"userAgent\" is null.");
      }
      this.userAgent = setterArg;
    }

    private @NonNull String cityCode;

    public @NonNull String getCityCode() {
      return cityCode;
    }

    public void setCityCode(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"cityCode\" is null.");
      }
      this.cityCode = setterArg;
    }

    private @NonNull String acceptLanguage;

    public @NonNull String getAcceptLanguage() {
      return acceptLanguage;
    }

    public void setAcceptLanguage(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"acceptLanguage\" is null.");
      }
      this.acceptLanguage = setterArg;
    }

    private @NonNull String baseUrl;

    public @NonNull String getBaseUrl() {
      return baseUrl;
    }

    public void setBaseUrl(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"baseUrl\" is null.");
      }
      this.baseUrl = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    NetHeaderBean() {}

    public static final class Builder {

      private @Nullable String authorization;

      @CanIgnoreReturnValue
      public @NonNull Builder setAuthorization(@NonNull String setterArg) {
        this.authorization = setterArg;
        return this;
      }

      private @Nullable String userAgent;

      @CanIgnoreReturnValue
      public @NonNull Builder setUserAgent(@NonNull String setterArg) {
        this.userAgent = setterArg;
        return this;
      }

      private @Nullable String cityCode;

      @CanIgnoreReturnValue
      public @NonNull Builder setCityCode(@NonNull String setterArg) {
        this.cityCode = setterArg;
        return this;
      }

      private @Nullable String acceptLanguage;

      @CanIgnoreReturnValue
      public @NonNull Builder setAcceptLanguage(@NonNull String setterArg) {
        this.acceptLanguage = setterArg;
        return this;
      }

      private @Nullable String baseUrl;

      @CanIgnoreReturnValue
      public @NonNull Builder setBaseUrl(@NonNull String setterArg) {
        this.baseUrl = setterArg;
        return this;
      }

      public @NonNull NetHeaderBean build() {
        NetHeaderBean pigeonReturn = new NetHeaderBean();
        pigeonReturn.setAuthorization(authorization);
        pigeonReturn.setUserAgent(userAgent);
        pigeonReturn.setCityCode(cityCode);
        pigeonReturn.setAcceptLanguage(acceptLanguage);
        pigeonReturn.setBaseUrl(baseUrl);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(authorization);
      toListResult.add(userAgent);
      toListResult.add(cityCode);
      toListResult.add(acceptLanguage);
      toListResult.add(baseUrl);
      return toListResult;
    }

    static @NonNull NetHeaderBean fromList(@NonNull ArrayList<Object> list) {
      NetHeaderBean pigeonResult = new NetHeaderBean();
      Object authorization = list.get(0);
      pigeonResult.setAuthorization((String) authorization);
      Object userAgent = list.get(1);
      pigeonResult.setUserAgent((String) userAgent);
      Object cityCode = list.get(2);
      pigeonResult.setCityCode((String) cityCode);
      Object acceptLanguage = list.get(3);
      pigeonResult.setAcceptLanguage((String) acceptLanguage);
      Object baseUrl = list.get(4);
      pigeonResult.setBaseUrl((String) baseUrl);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class BatteryMapBean {
    private @NonNull String address;

    public @NonNull String getAddress() {
      return address;
    }

    public void setAddress(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"address\" is null.");
      }
      this.address = setterArg;
    }

    private @NonNull Double latitude;

    public @NonNull Double getLatitude() {
      return latitude;
    }

    public void setLatitude(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"latitude\" is null.");
      }
      this.latitude = setterArg;
    }

    private @NonNull Double longitude;

    public @NonNull Double getLongitude() {
      return longitude;
    }

    public void setLongitude(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"longitude\" is null.");
      }
      this.longitude = setterArg;
    }

    private @NonNull String time;

    public @NonNull String getTime() {
      return time;
    }

    public void setTime(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"time\" is null.");
      }
      this.time = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    BatteryMapBean() {}

    public static final class Builder {

      private @Nullable String address;

      @CanIgnoreReturnValue
      public @NonNull Builder setAddress(@NonNull String setterArg) {
        this.address = setterArg;
        return this;
      }

      private @Nullable Double latitude;

      @CanIgnoreReturnValue
      public @NonNull Builder setLatitude(@NonNull Double setterArg) {
        this.latitude = setterArg;
        return this;
      }

      private @Nullable Double longitude;

      @CanIgnoreReturnValue
      public @NonNull Builder setLongitude(@NonNull Double setterArg) {
        this.longitude = setterArg;
        return this;
      }

      private @Nullable String time;

      @CanIgnoreReturnValue
      public @NonNull Builder setTime(@NonNull String setterArg) {
        this.time = setterArg;
        return this;
      }

      public @NonNull BatteryMapBean build() {
        BatteryMapBean pigeonReturn = new BatteryMapBean();
        pigeonReturn.setAddress(address);
        pigeonReturn.setLatitude(latitude);
        pigeonReturn.setLongitude(longitude);
        pigeonReturn.setTime(time);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(address);
      toListResult.add(latitude);
      toListResult.add(longitude);
      toListResult.add(time);
      return toListResult;
    }

    static @NonNull BatteryMapBean fromList(@NonNull ArrayList<Object> list) {
      BatteryMapBean pigeonResult = new BatteryMapBean();
      Object address = list.get(0);
      pigeonResult.setAddress((String) address);
      Object latitude = list.get(1);
      pigeonResult.setLatitude((Double) latitude);
      Object longitude = list.get(2);
      pigeonResult.setLongitude((Double) longitude);
      Object time = list.get(3);
      pigeonResult.setTime((String) time);
      return pigeonResult;
    }
  }

  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }

  private static class FlutterToNativeCodec extends StandardMessageCodec {
    public static final FlutterToNativeCodec INSTANCE = new FlutterToNativeCodec();

    private FlutterToNativeCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return NetHeaderBean.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof NetHeaderBean) {
        stream.write(128);
        writeValue(stream, ((NetHeaderBean) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface FlutterToNative {

    @NonNull 
    NetHeaderBean getNetHeaderBean();

    void navigation();

    void scan();

    /** The codec used by FlutterToNative. */
    static @NonNull MessageCodec<Object> getCodec() {
      return FlutterToNativeCodec.INSTANCE;
    }
    /**Sets up an instance of `FlutterToNative` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable FlutterToNative api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.saas_flutter_module.FlutterToNative.getNetHeaderBean", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  NetHeaderBean output = api.getNetHeaderBean();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.saas_flutter_module.FlutterToNative.navigation", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.navigation();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.saas_flutter_module.FlutterToNative.scan", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.scan();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class NativeToFlutterCodec extends StandardMessageCodec {
    public static final NativeToFlutterCodec INSTANCE = new NativeToFlutterCodec();

    private NativeToFlutterCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return BatteryMapBean.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof BatteryMapBean) {
        stream.write(128);
        writeValue(stream, ((BatteryMapBean) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class NativeToFlutter {
    private final @NonNull BinaryMessenger binaryMessenger;

    public NativeToFlutter(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    /** The codec used by NativeToFlutter. */
    static @NonNull MessageCodec<Object> getCodec() {
      return NativeToFlutterCodec.INSTANCE;
    }
    public void setBatteryMapBean(@NonNull BatteryMapBean beanArg, @NonNull Result<Void> result) {
      final String channelName = "dev.flutter.pigeon.saas_flutter_module.NativeToFlutter.setBatteryMapBean";
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(beanArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success(null);
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void setCheckInSn(@NonNull String snArg, @NonNull Result<Void> result) {
      final String channelName = "dev.flutter.pigeon.saas_flutter_module.NativeToFlutter.setCheckInSn";
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(snArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success(null);
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
  }
}
